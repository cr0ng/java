# day06

flag 기법
==> 프로그램을 실행하다 보면
	두 가지 이상의 경우가 발생되는 순간이 존재하낟.
	이 때 어떤 경우가 발생했는지를 알아보는 기법
	
	예 ]
		for(;;){
		
			if(조건식){
				처리...
				break;
			}
		}
		
		1)
		==> 1) 부분은 반복문이 정상적으로 종료된 후 실행되는 부분이다.
		
			이 때 1) 부분을 실행할 때 반복문이 정상적으로 종료 되었는지??
					아니면 break; 명령을 만나서 종료되었는지를
					확인할 수 있는 방법이 없다.
					
					따라서 확인할 수 있도록 하는 방법은
					반복문이 시작하기 전에 변수를 만들어서 가상의 데이터를 입력하고
					특정 순간이 발생하면 변수의 데이터를 변경한다.
					(break; 를 실행하기 전에 데이터를 변경한다.)
					
					따라서 1) 부분을 실행할 때 해당 변수의 값을 확인하면
					반복문이 끝까지 실행했는지
					아니면 중간에 중단을 했는지 확인 할 수 있게 된다.
					
--------------------------------------------------------------------------------------------------					

continue
==> for,while,do ~while 에서만 사용하는 명령으로
	현재 회차 실행을 중지하고 다음 회차를 진행하세요.
	==> 즉, 현재 작업은 무의미하므로 더이상 진행하지 말고
		다음 반복 작업을 진행하도록 하는 명령...
		
	주의 사항 ]
		
		for(1);2);3)){
			4)
			
			continue;
			5)
		}	
		6)
		
		실행순서 ]
		 
		 	1 -> 2 -> 4 -> 3 -> 2 -> 4 -> 3 -> ...
		 	
		 	의 순서로 실해오디면 절대로 5)는 실행되지 않는다.
		 	
		 while(조건식 -1)){
		 	2)
		 	continue;
		 	3)
		 }
		 4)
		 
		 실행순서 ]
		 	
		 	1 -> 2 - > 1 -> 2-> ... 조건식이 거짓일 될 때까지 -> 1 -> 4
		 	
		 	처음부터 거짓인 경우
		 	1 -> 4
		 	
		 참고 ]
		 	
		 	continue 역시 감싸는 반복문 블럭에 적용되는 명령이고
		 	따라서 바깥의 반복문을 적용시키려면 label을 사용해서 처리하면 된다.
		 	
		 	라벨이름 :
		 	for(;;){		------------ 1)
		 	
		 		continue(		------------> 1)의 다음 회차 진행
		 		for(;;){	------------ 2)
		 		
		 			if(조건식){
		 				continue 라벨이름;
		 			}
		 		}
					
--------------------------------------------------------------------------------------------------					
	
배열 
==> 같은 형태의 데이터를 여러개 모아서 한꺼번에 관리하는 방식	
	데이터가 많은 경우 원칙적으로 데이터 갯수만큼 변수를 만들어야 한다.
	이러면 변수를 만들때도 불편하고
	그 데이터를 사용할 때도 엄청나게 불편하다.
	이런 문제를 해결하기 위해서 제시된 방법이 배열이다.
	즉, 배열이란
	하나의 변수를 이용해서 여러개의 데이터를 관리할 수 있도록 하는 것.
					
	★★★
	대신 같은 타입만 기억을 시킬 수 있고
	만들때 크기를 반드시 지정해야 한다.
	
	단점은 한번 만들어진 배열은
	크기나 타입을 절대로 변경할 수 없다.				
					
	참고 ]
		자바에서는 한번 만든 변수는 타입을 변경할 수 없다.
		
		예]
			
			int no = 10;
			String no = "10";
			
		참고 ]
			자바에서의 변수의 형태
			
				1. 기본형 변수(Primitive Type, Value 형태 )
				==> 변수가 참조하는 주소가 데이터 자체인 경우
					따라서 변수의 내용을 찾으면 데이터를 바로 찾을 수 있다.
					
					이 때 사용되는 데이터 타입은 자바에서 제공하는 기본 데이터 타입
					boolean, char, byte, short, int, long ,float, double
					
				2. 참조형 변수(Reference Type)
				==>	변수가 참조하는 주소가 데이터 자체가 아니고 
					데이터의 주소가 담긴 주소를 다시 참조하는 경우...
					
					
					자바에서 제공하는 기본데이터타입 이외의 것으로 만든 것들...
					
	참고 ]
		Heap 영역
			특징 ]
				1. 반드시 주소를 알아야만 사용할수 있는 영역
				2. 8가지 영역중에서 크기가 가장 큰 영역이다.
					확장이 가능하다.
					(부족하면 스스로 다른 영역을 뺏어서 Heap 영역으로 사용할 수 있다.)
					==> 따라서 자바는 많은 양의 데이터가 필요하면
						Heap에 기억하도록 되어있다.
				3. 원칙적으로 한번 만드러지면 그 프로그램이 종료될 때까지 없어지지 않는 영역이다.
				★★★
				4. Heap 영역에 생기는 메모리는 자동 초기화된다.
				
==================================================================================================				
				
배열을 만드는 방법
	1. 배열을 원칙적으로 데이터가 기억될 공간을 Heap에 만들어야 한다.
	
		명령어
		
			new 데이터타입[갯수];
			
			데이터타입 : Heap에 만들 데이터 영역의 형태를 지정한다.
			[갯수] 	   : Heap에 만들 데이터 영역의 갯수를 지정한다.
			
		예]
			new int[10];
			==> Heap 영역에 int형 데이터를 기억할 메모리 공간을 10개 만들어 주세요.
			
			new float[5];
			==> Heap 영역에 float형 데이터를 기억할 메모리 공간 5개를 만들어 주세요.
			
	참고 ]
	
		new 명령
		
			1. Heap에 뭔가를 만드세요.
			2. 만들어진 메모리의 시작주소를 알려드릴게요..
			
	2. Heap에 있는 메모리의 주소를 기억할 변수를 만들어야 한다.
	
		명령어
		
			데이터타입[]	변수이름;
			
			예]
				int[] num;
				
			데이터타입[]	: 자신이 관리할 Heap 영역에 있는 실제 데이터형태에 따라 달라진다.
							==> Heap type이라고 부른다
							
			★★
			결론
				Heap type이 같은 주소만 기억한다.
				
			예 ]
				int[] num = num float[5]	---> X : Heap Type이 다르기 때문에...
				int[] num = new int[10]		---> O
										
--------------------------------------------------------------------------------------------------					
	정리]
	
		배열 만드는 방법
			1. 만들 배열이 Heap에 생길 텐데 이 주소를 기억할 변수를 준비한다.
			
				예 ]
				
					int[] num;	-->	변수 선언
					
			2. Heap 필요한 메모리를 만들고 그 주소를 준비한 변수에 기억한다.
			
				num = new int[5];
							
--------------------------------------------------------------------------------------------------					
	
배열 사용 방법

	명령어
	
		변수[위치];
		
			참고 ]	위치는 0부터 시작한다.
			
		참고 ]
			배열주소( 또는 변수이름).length
			==> 배열주소가 관리하는 곳에 있는 메모리의 갯수를 알려주는 명령
			
			예 ]
				int[] num = new int[10];
				...
				System.out.println(num.length);	//==> 10이 출력된다.
				
		참고 ]
			배열의 초기화
			==> 배열 메모리는 Heap에 생기므로 자동 초기화가 이루어진다.
			
			 	정수 : 0
			 	실수 : 0.0
			 	논리 : false
			 	문자 : 0 (아스키코드 값)
			 	
			 경우에 따라서는 배열 메모리에 강제로 특정 값을 입력할 필요도 있을 것이다.
			 ==> 이것을 배열의 초기화라고 표현한다.
			 
			 	형식 1]
			 	
			 		int[] num = {1,2,3,4,5};
			 		
			 	형식 2]
			 		int[] num = new int[]{1,2,3,4,5};
			 		
			 	★★★
			 	주의사항 ]
			 		배열을 초기화할 경우에는 배열의 크기를 입력하지 못한다.
			 		대신 초기화에 사용되는 테이블을 이용해서 크기가 자동 결정된다.
			 		
		참고 ]
		
			Arrays.toString() 함수
			==> 앞에서 보았듯이 배열을 출력하기 위해서는 
				for 명령등 반복문을 사용해서 출력해야 한다.
				단순히 내용만 확인하는 차원에서는 반복문을 사용하는 것이 불편하다.
				==>
				이 명령은 데이터를 문자열로 반환해주는 용도로
				배열에 담긴 내용을 확인하는 용도로만 주로 사용한다.
				
				따라서 이 함수를 사용해서 나온 결과로 원하는 연산을 하는 용도로는 
				부적합하다.
				
				오직 배열에 담긴 내용을 확인하는 용도로만 사용해야 한다.
				
				형식 ]
					
					Arrays.toString(배열주소);
			 		
			
					
--------------------------------------------------------------------------------------------------					
	
					
--------------------------------------------------------------------------------------------------					
						
--------------------------------------------------------------------------------------------------					
				