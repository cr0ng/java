# day16

인터페이스(Interface)
==> 클래스의 한 종류이긴 하지만
	약간 그 형태나 의미가 지금까지 배웠던 클래스하고는 다른
	특수한 클래스의 일종...
	
	1. 최상위 클래스가 Object가 아니다.
		==> 즉, 인터페이스는 다른 클래스를 상속받아서 만들어진 클래스가 아니다.
		
	2. 인터페이스 내부에는 100% 추상함수가 존재해야 한다.
		==> 절대로 일반 함수는 존재하지 않는다.
			기능을 가진 함수는 절대로 있어서는 안된다.
			
		참고 ]
			추상적인 함수
			==> abstract 속성이 부여되지 않아도
				자동적으로 몸체가 존재하지 않는 추상함수
				
	3. 인터페이스는 다른 클래스를 상속해줄 수 있는데
		이 때 다중상속이 가능하다. 
		
	4. 변수는 가질 수 있다.
		이 때 이 변수는 묵시적으로
			public static final 
		속성이 붙게 된다.
		
	5. 인터페이스 소속 함수는 묵시적으로 public abstract 함수가 된다.
	
참고 ]
	인터페이스 내부에는 일반 함수는 원칙적으로 올 수 없다.
	하지만 일반함수를 가지고 있는 인터페이스도 있다.
	이 때 이 일반함수에는 반드시 default라고 붙여줘야한다.
	
	형식 ]
		default 반환값타입 함수이름(매개변수리스트){
			함수내용...
		}
	
--------------------------------------------------------------------------------------------------------

만드는 방법 ]

	[접근지정자] interface 인터페이스이름 {
		변수;	==> 묵시적으로 public static final 변수가 된다.
		함수();	==> 묵시적으로 public abstract 함수가 된다.
	}
	
--------------------------------------------------------------------------------------------------------

왜 인터페이스를 만들었나?
==> 가끔은 JVM에 의해서 자동 호출되어야하는 함수가 필요하다.

	따라서 함수의 존재는 필요하다.
	
	하지만 가끔은 이 함수가 해야할 일이 개발자의 몫인 경우가 존재한다.
	
	따라서 기능은 개발자의 몫으로 남긴 것이다.
	
	참고 ]
		자바에서 이벤트를 처리하는 순서
			1. 사용자가 버튼을 클릭하면 이벤트가 발생한다.
				이 이벤트는 운영체제가 인지하게 된다.
				
			2. 운영체제는 자신이 인지한 이벤트가 발생한 프로그램을 구분해서
				그 프로그램을 담당하는 플랫폼(JVM)에게 알려준다.
				
			3. JVM은 통보받은 이벤트의 정보를 분석하여
				그 정보에 합당한 함수를 호출하여 이벤트를 처리한다.
				==> 그 정보에 합당한 함수를 호출한다는 것에 의미가 있다.
					결국 함수가 존재해야한다.
				==> 이벤트가 발생하면 무엇을 처리할지는 JVM이 결정하는 것이 아니고
					개발자의 몫이다.
					
인터페이스 사용하기
	1.
		1) 인터페이스는 스스로 new 되지 못한다.
			(생성자함수를 호출하면서 인스턴스를 생성하지 못한다.)
			이유는 추상클래스와 마찬가지로
			인터페이스 소속의 함수들은 모두 기능이 없는(몸체가 없는, 미완성인) 함수들로만
			구성되어있기 때문이다.
			
			따라서 추상클래스와 마찬가지로
			일반클래스에게 상속을 해줌
	
			상속 방법 ]
				
				class 클래스이름 implements 인터페이스이름{
				}
				
			참고 ]
				일반 클래스를 상속 받는것을 "상속" 이라고 표현하고 
				인터페이스를 상속받는 것은 "구현"이라고 표현
				
		2) 상속받은 클래스에는 인터페이스 안의 모든 함수를 100% 오버라이드해야한다.
			그리고 필요한 기능은 개발자가 구현한다.
			==> 인터페이스 소속 함수는 자동적으로 public abstract 이다.
			
		3) 일반클래스를 new 시켜서 사용한다.
			==> 이 방법은 인터페이스 사용의 90%를 차지...
			
	2. 
		약 10% 정도는
		반환값이 자기자신이면서 속성이 static인 함수를 만들어서 사용할 수 있다.
		이 때 추상 클래스와 차이점은
		추상 클래스는 그 클래스안에 그런 함수가 존재했지만
		인터페이스의 경우는 다른클래스에 이런 함수들이 존재하는 경우가 있다.
		
참고 ]
	인터페이스는 다중 상속이 가능하다
	
	형식 ]
		class 클래스이름 implements 인터페이스1, 인터페이스2, ... {
			여기서는 상속받은 인터페이스의 모든 함수를 100% 오버라이드 해야한다.
		}
		
		참고 ]
			만약 추상함수를 오버라이드 하지 않으면
			추상 클래스로 만들어야한다.
			
★★
참고 ]
	일반 상속과 인터페이스 구현을 동시에 사용할 수 있다.
	
	형식 ]
		class 클래스이름 extends 상속해줄클래스이름 implements 인터페이스1, 인터페이스2, .... {
		}
		
		주의사항]
			이 때 반드시 extends가 먼저 와야하고
			implements가 나중에 와야한다.
	
--------------------------------------------------------------------------------------------------------

참고 ]
	인터페이스도 다른 인터페이스를 상속받아서 만들 수 있다.
	
	형식 
		interface 인터페이스이름 extends 상속해줄인터페이스이름{
		}

--------------------------------------------------------------------------------------------------------

내부클래스
==> 클래스 안에 다시 클래스를 만들 때
	클래스 내부에 만들어지는 클래스를 내부 클래스라 한다.
	
종류 ]
	1. Top Level Inner Class
	==> 비록 형식은 내부 클래스이지만
		독립적으로 활동하는 클래스
		
		형식 ]
			static class 클래스이름 {}
		
		정리하자면 내부클래스를 만들면서 static을 붙이면 Top Level 내부클래스가 된다.
		
	참고 ]
		클래스이름
		일반 클래스와 달리 내부클래스의 이ㅡㄻ은
		"바깥클래스이름.내부클래스이름"의 형식을 취함
		
	★★★	
	2. 전역 Inner Class
		==> 일반 클래스를 내부 클래스로 만든 것
			(이 클래스가 우리가 내부 클래스라고 부르는 것의 90%를 차지한다.)
			
		형식 ]
			class 클래스이름 {}
			
		특징 ]
			1. 바깥클래스의 모든 멤버는 저절로 자기것처럼 사용할 수 있다.
			2. 반드시 바깥클래스가 new 된 이후에 안쪽 클래스를 생성할 수 있다.
	
	3. 지역 Inner Class
	
		특징 ]
			1. 전역 내부 클래스와 유사하게 바깥 클래스의 멤버를 모두 사용할 수 있다.
			2. 이 클래스는 다른 곳에서 new 시킬 수 없다.
	
	4. 무역 Inner Class



	
--------------------------------------------------------------------------------------------------------

예외처리
==> 프로그램적으로는 문제가 없으나(문법상 전혀 에러가 발생하지 않으나)
	데이터의 문제나 장비의 문제 등에 의해서
	프로그램을 실행하는 도중 발생하는 에러를 "실행 에러(RunTime Error)" 라고 표현

	
--------------------------------------------------------------------------------------------------------


finally 블럭
==> 예외 발생 여부와 관계없이 반드시 실행되어야 할
	문장이 존재할 경우 이런 문자를 입력하는 블럭을 말한다
	
--------------------------------------------------------------------------------------------------------
	
예외 정보 출력하기
==> 다음 이유에 의해서 예외 정보를 얻을 수 있다.

	1. 예외정보클래스 변수를 출력하면 된다.
		예 ]
			System.out.println(예외정보클래스변수);
			==> 이렇게 처리하면 예외의 원인을 파악할 수 있게 된다.
			
	2. 예외변수.printStackTrace() 를 이용하는 방법
		==> 예외의 정보 + 예외가 발생하게된 위치와 경로
			를 추적해서 출력한다.
			
	예외처리는 예외가 발생하면 개발자가 그것을 수정해서
	정상적으로 동작하도록 만드는 행위라고 정의
	(프로그램의 정상적인 종료)
	하지만 정상적으로 동작하도록 만드는 행위를 한다는 것은
	매우 어려운 일이고 그 경우가 많지 않다.
	
	다만 예외를 처리하는 실제 이유는
	예외의 정보를 알아서
	사용자에게 왜 프로그램에 문제가 발생했는지를 알려주고
	그 프로그램을 정상적으로 종료하도록 하는것에 목적이 있는 경우가 많다.
	
--------------------------------------------------------------------------------------------------------
	
예외 전이하기
==> 함수는 프로그램의 가장 작은 단위로
	한가지 작업을 하기 위해서 만든 것이다.
	따라서 함수 안에서 작업을 하다가 예외가 발생하면
	그 함수는 더이상 실행할 필요가 없는 경우가 많다.
	그래서 함수는 예외를 전이하도록 해 놓은 경우가 많다.
	
	형식 ]
		
		[접근지정자] [속성] 반환값타입 함수이름(매개변수리스트) throws 예외클래스1, 예외클래스2, ...{
			
		}
		
	의미 ]
		지정한 예외가 발생하면 이 함수는 더이상 실행해도 의미가 없으므로 실행을 중지시킨다.
		
	★★★★★
	예외가 전이된 함수는
	그 함수를 사용하는 곳에서 반드시 예외 처리를 해줘야한다. ( ==> try{} 블럭안에 넣어서 처리하세요.)
	
	참고 ]
		try{}
		catch{}
		등 {} 블럭기호 안에서 변수를 만들게 되면
		이 변수는 해당 블럭 안에서만 사용하는 변수가 된다.
		
		
		

	
	
--------------------------------------------------------------------------------------------------------
	
	
	
	
--------------------------------------------------------------------------------------------------------
	
		
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	