# day20

Map
==> 하나의 데이터를 그 데이터를 구분할 수 있는
	키값과 한 쌍으로 만들어서 데이터를 기억하는 컬렌셕의 일종
	그리고 사용할 경우에는 키값을 이용해서 데이터를 꺼내를 수 있도록 한 것
	
	Map 계열은 많은 양의 데이터를 보관하는 용도 보다는
	데이터를 손쉽게 구분하여 사용할 목적으로 사용됨
	
Hashtable / HashMap

	Hashtable이 구 버젼, HashMap이 나중에 나온 클래스
	
	내부적으로 키값을 해쉬 테이블을 이용해서 정렬해서 보관
	
	주요함수
		put(Object key, Object value)
		==> 데이터를 입력하는 함수
		
		get(Object key)
		==> 필요한 데이터를 꺼내는 함수
		
		참고 함수	
			
			values()
			==> 데이터만 꺼내서 반환해주는 함수
			
			keys()
			==> 키값만 꺼내서 반환해주는 함수 (Hashtable에만 존재하는 함수)
			
			keySet()
			==> 키값만 꺼내서 반환해주는 함수 (Hashtable, HashMap 둘 다 사용할 수 있음. Map 계열에서는 모두 사용가능)
			
			entrySet()
			==> Map은 반드시 키값을 알아야 데이터를 꺼낼 수 있다.
				==> 키값은 데이터를 Set으로 묶어주는 함수
				
				주의 ]	
					Map은 항상 키와 벨류 두 개가 있어야 저장됨
					Set은 데이터 한 개만 있으면 저장됨
					따라서 키값과 데이터를 하나로 묶어야만
					Set에 저장이 된다.
					
					이 때 이 문제를 해결하기 위한 클래스(VO 클래스)가 존재
					그 클래스가 바로 Map.Entry
					== 이 클래스 안에는 key와 value 변수를 은닉화 시켜놓고
						이 변수를 사용할 수 있는 함수를 제공함으로써
						두 개의 변수를 하나로 묶어 놓은 클래스
						
TreeMap
==> TreeSet도 마찬가지로 내부에서 정렬하면서 데이터를 기억하는 Map이다
	이 때 정렬 기준은 키값을 이용해서 정렬하게 된다.
	따라서 키값이 정렬이 되지 않는 클래스는 사용할 수 없고
	필요하다면 정렬 방식을 정해서 사용해야 한다.
	
	Tmp abc(){
		int a = 10;
		String b = "홍길동";
		Tmp t = new Tmp();
		t.a = a;
		t.b = b;
		
		return t;
					
	}
	
	==>
		이처럼 클래스를 보면 가끔은 무슨 기능을 필요로 해서 만들어지는 것이 아니고
		여러개의 데이터를 하나로 묶기 위한 목적으로 만들어 놓은 클래스가 있다.
		
		class Tmp{
			int a;	
			String b;
		}
		
		이런 클래스를 우리는 데이터 빈 클래스라고도 하고
		Value Object(VO)라고도 함
		DTO(Data Transfer Object)라고도 부름
		
-----------------------------------------------------------------------------------------------------
참고 ]
	컬렉션 안에는 다시 컬렉션을 입력할 수 있다.
	
		컬렉션 안에는 모든 클래스를 입력할 수 있으므로
		컬렉션도 클래스이므로 저장이 가능
		
			
			
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	